[tool.poetry]
name = "home-first-aid-kit"
version = "0.1.0"
description = ""
authors = ["Alexander Pavlov <dev@pavlovteam.ru>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
sqlalchemy = "^2.0.37"
alembic = "^1.14.1"
django = "^5.1.6"
djangorestframework = "^3.15.2"
markdown = "^3.7"
django-filter = "^25.1"
drf-spectacular = "^0.28.0"


[tool.poetry.group.dev.dependencies]
pytest = "^8.3.4"
ruff = "^0.9.2"
coverage = "^7.6.10"
pre-commit = "^4.1.0"
wemake-python-styleguide = "^1.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff.format]
quote-style = "single"
docstring-code-format = false

[tool.ruff.lint]
select = [
  "A",    # flake8-builtins
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "C90",  # maccabe
  "COM",  # flake8-commas
  "D",    # pydocstyle
  "DTZ",  # flake8-datetimez
  "E",    # pycodestyle
  "ERA",  # flake8-eradicate
  "EXE",  # flake8-executable
  "F",    # pyflakes
  "FBT",  # flake8-boolean-trap
  "FLY",  # pyflint
  "FURB", # refurb
  "G",    # flake8-logging-format
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "ISC",  # flake8-implicit-str-concat
  "LOG",  # flake8-logging
  "N",    # pep8-naming
  "PERF", # perflint
  "PIE",  # flake8-pie
  "PL",   # pylint
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # ruff
  "S",    # flake8-bandit
  "SIM",  # flake8-simpify
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "T100", # flake8-debugger
  "TRY",  # tryceratops
  "UP",   # pyupgrade
  "W",    # pycodestyle
  "YTT",  # flake8-2020
]
ignore = [
  "COM812",
  "D100",
  "D104",
  "D105",
  "D106",
  "D107",
  "D203",
  "D212",
  "D212",
  "RUF001",
  "RUF002",
]
external = [ "WPS" ]

flake8-quotes.inline-quotes = "single"

[tool.coverage.run]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true